{"version":3,"sources":["Controls/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","init","draw","rest","rows","next","dim","setup","p5","canvasParentRef","createCanvas","offsetWidth","parent","GridCell","R","G","B","steps","this","color","hasOwnProperty","Grid","state","cells","paused","coloringFunction","colorInCells","filterName","gDecay","bind","doDrawing","generate","pause","swapFilter","toggleCellSize","toggleSteps","toggleGDecay","colorInGreen","colorInBlue","colorInRed","colorInWhite","prevProps","prevState","snapshot","setState","16","20","24","28","4","8","12","1","2","3","5","Math","floor","height","cols","width","newCells","Array","from","newNext","i","j","random","background","length","y","x","cell","neighbors","neighborCell","forEach","element","increment","decrement","nextCell","temp","fillFunc","stroke","rect","colorAnyCell","c","fill","abs","clickArgs","newLabel","newColoringFunction","className","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.207f2937.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport reactDom from \"react-dom\";\r\nimport Sketch from \"react-p5\";\r\nimport \"./Grid.css\";\r\n\r\nconst Canvas = props => {\r\n    const { init, draw, rows, next, dim, ...rest } = props\r\n\r\n    let setup = (p5, canvasParentRef) => {\r\n        let drawTarget = p5.createCanvas(canvasParentRef.offsetWidth, canvasParentRef.offsetWidth).parent(canvasParentRef);\r\n        init(p5);\r\n    }\r\n\r\n    return <Sketch setup={setup} draw={draw} {...rest} />\r\n}\r\n\r\nexport class GridCell {\r\n    constructor(R = 0, G = 0, B = 0, steps = 1) {\r\n        this.R = R\r\n        this.G = G\r\n        this.B = B\r\n        this.steps = steps\r\n    }\r\n\r\n    increment(color) {\r\n        if (this.hasOwnProperty(color) && this[color] < this.steps) {\r\n            this[color] += 1;\r\n        }\r\n    }\r\n\r\n    decrement(color) {\r\n        if (this.hasOwnProperty(color) && this[color] > 0) {\r\n            this[color] -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dim: 28,\r\n            cells: [],\r\n            next: [],\r\n            p5: null,\r\n            paused: false,\r\n            coloringFunction: this.colorInCells,\r\n            filterName: \"All\",\r\n            steps: 1,\r\n            gDecay: true\r\n        };\r\n\r\n        this.draw = this.draw.bind(this);\r\n        this.doDrawing = this.doDrawing.bind(this);\r\n        this.init = this.init.bind(this);\r\n        this.generate = this.generate.bind(this);\r\n        this.pause = this.pause.bind(this);\r\n        this.swapFilter = this.swapFilter.bind(this);\r\n        this.toggleCellSize = this.toggleCellSize.bind(this);\r\n        this.toggleSteps = this.toggleSteps.bind(this);\r\n        this.toggleGDecay = this.toggleGDecay.bind(this);\r\n\r\n        this.colorInCells = this.colorInCells.bind(this);\r\n        this.colorInGreen = this.colorInGreen.bind(this);\r\n        this.colorInBlue = this.colorInBlue.bind(this);\r\n        this.colorInRed = this.colorInRed.bind(this);\r\n        this.colorInWhite = this.colorInWhite.bind(this);\r\n\r\n        this.state.coloringFunction = this.state.coloringFunction.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.dim !== this.state.dim) {\r\n            this.init(this.state.p5);\r\n            this.doDrawing(this.state.p5, this.state.coloringFunction);\r\n        } else if (prevState.coloringFunction !== this.state.coloringFunction) {\r\n            this.doDrawing(this.state.p5, this.state.coloringFunction);\r\n        }\r\n    }\r\n\r\n    toggleCellSize() {\r\n        const sizes = { 16: 20, 20: 24, 24: 28, 28: 4, 4: 8, 8: 12, 12: 16 }\r\n        this.setState({ dim: sizes[this.state.dim] ?? 28 });\r\n    }\r\n\r\n    toggleSteps() {\r\n        const totalIncrements = { 1: 2, 2: 3, 3: 4, 4: 5, 5: 1 }\r\n        this.setState({ steps: totalIncrements[this.state.steps] ?? 1 });\r\n    }\r\n\r\n    init(p5) {\r\n        if (this.state.p5 != null) {\r\n            p5 = this.state.p5;\r\n        }\r\n        let rows = Math.floor(p5.height / this.state.dim);\r\n        let cols = Math.floor(p5.width / this.state.dim);\r\n        let newCells = Array.from(Array(rows), () => new Array(cols));\r\n        let newNext = Array.from(Array(rows), () => new Array(cols));\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (i == 0 || j == 0 || i == rows - 1 || j == cols - 1) {\r\n                    newCells[i][j] = new GridCell(0, 0, 0, this.state.steps);\r\n                }\r\n                else {\r\n                    newCells[i][j] = new GridCell(Math.floor(Math.random() * 2), 0, Math.floor(Math.random() * 2), this.state.steps);\r\n                }\r\n                newNext[i][j] = new GridCell(0, 0, 0, this.state.steps);\r\n            }\r\n        }\r\n\r\n        this.setState({ cells: newCells, next: newNext, p5: p5 });\r\n\r\n        p5.background(255);\r\n        this.generate(p5);\r\n        this.doDrawing(p5, this.state.coloringFunction);\r\n    }\r\n\r\n    generate(p5) {\r\n        if (this.state.cells.length > 0) {\r\n            for (let y = 1; y < this.state.cells.length - 1; y++) {\r\n                for (let x = 1; x < this.state.cells[y].length - 1; x++) {\r\n                    let cell = this.state.cells[y][x];\r\n                    // count neighbors\r\n                    let neighbors = { R: 0, G: 0, B: 0 };\r\n                    for (let i = -1; i <= 1; i++) {\r\n                        for (let j = -1; j <= 1; j++) {\r\n                            let neighborCell = this.state.cells[y + i][x + j];\r\n                            if (cell === neighborCell) {\r\n                                continue;\r\n                            }\r\n\r\n                            [\"R\", \"G\", \"B\"].forEach(element => {\r\n                                neighbors[element] += neighborCell[element] > 0 ? 1 : 0;\r\n                            });\r\n                        }\r\n                    }\r\n                    // Conflict step--R+B = G, G=R||B\r\n\r\n                    if (cell.B > 0 && cell.R > 0) {\r\n                        cell.increment(\"G\");\r\n                    } else if (cell.G > 0 &&\r\n                        cell.R < cell.G &&\r\n                        cell.B < cell.G) {\r\n                        if (Math.random() > .5) {\r\n                            cell.increment(\"B\");\r\n                        } else {\r\n                            cell.increment(\"R\");\r\n                        }\r\n                        // Optional Remove Green step\r\n                        if (this.state.gDecay === true) {\r\n                            cell.decrement(\"G\");\r\n                        }\r\n                    }\r\n                    // Game of Life rules\r\n                    let nextCell = this.state.next[y][x];\r\n                    [\"R\", \"G\", \"B\"].forEach(element => {\r\n                        if ((cell[element] > 0) && (neighbors[element] < 2)) nextCell.decrement(element);\r\n                        else if ((cell[element] > 0) && neighbors[element] > 3) nextCell.decrement(element);\r\n                        else if ((cell[element] == 0) && neighbors[element] == 3) nextCell.increment(element);\r\n                        else nextCell[element] = cell[element];\r\n                    });\r\n                }\r\n            }\r\n\r\n            let temp = this.state.cells;\r\n            this.state.cells = this.state.next;\r\n            this.state.next = temp;\r\n        }\r\n    }\r\n\r\n    draw(p5) {\r\n        if (this.state.paused) return;\r\n        this.doDrawing(p5, this.state.coloringFunction);\r\n    }\r\n\r\n    doDrawing(p5, coloringFunction) {\r\n        if (p5) {\r\n            if (this.state.cells?.length > 0) {\r\n                p5.background(255);\r\n                this.generate(p5);\r\n                coloringFunction(p5);\r\n            }\r\n        }\r\n    }\r\n\r\n    colorAnyCell(p5, fillFunc) {\r\n        for (let i = 0; i < this.state.cells.length; i++) {\r\n            for (let j = 0; j < this.state.cells[i].length; j++) {\r\n                let c = this.state.cells[i][j];\r\n                fillFunc(c);\r\n                p5.stroke(0);\r\n                p5.rect(i * this.state.dim, j * this.state.dim, this.state.dim - 1, this.state.dim - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    colorInCells(p5) {\r\n        this.colorAnyCell(p5, (c) => {\r\n            p5.fill(c.R / c.steps * 255, c.G / c.steps * 255, c.B / c.steps * 255);\r\n        })\r\n    }\r\n\r\n    colorInGreen(p5) {\r\n        this.colorAnyCell(p5, (c) => {\r\n            if ((/* c.R + c.B +  */c.G) > 0) {\r\n                p5.fill(c.R / c.steps * 255, c.G / c.steps * 255, c.B / c.steps * 255);\r\n            } else {\r\n                p5.fill(0);\r\n            }\r\n        })\r\n    }\r\n    colorInRed(p5) {\r\n        this.colorAnyCell(p5, (c) => {\r\n            if ((c.R) > 0) {\r\n                p5.fill(c.R * 255, c.G * 255, c.B * 255);\r\n            } else {\r\n                p5.fill(0);\r\n            }\r\n        })\r\n    }\r\n    colorInBlue(p5) {\r\n        this.colorAnyCell(p5, (c) => {\r\n            if ((c.B) > 0) {\r\n                p5.fill(c.R * 255, c.G * 255, c.B * 255);\r\n            } else {\r\n                p5.fill(0);\r\n            }\r\n        })\r\n    }\r\n    colorInWhite(p5) {\r\n        this.colorAnyCell(p5, (c) => {\r\n            if (Math.abs(c.R - c.G) < 2 && c.R == c.B && c.R !== 0) {\r\n                p5.fill(c.R * 255, c.G * 255, c.B * 255);\r\n            } else {\r\n                p5.fill(0);\r\n            }\r\n        });\r\n    }\r\n\r\n    pause() {\r\n        this.setState({ paused: !this.state.paused })\r\n    }\r\n\r\n    toggleGDecay() {\r\n        this.setState({ gDecay: !this.state.gDecay });\r\n    }\r\n\r\n    swapFilter(clickArgs) {\r\n        var newLabel = this.state.filterName;\r\n        var newColoringFunction = this.state.coloringFunction;\r\n        if (this.state.filterName === \"All\") {\r\n            newColoringFunction = this.colorInBlue;\r\n            newLabel = \"Blue\";\r\n        } else if (this.state.filterName === \"Blue\") {\r\n            newColoringFunction = this.colorInRed;\r\n            newLabel = \"Red\";\r\n        } else if (this.state.filterName === \"Red\") {\r\n            newColoringFunction = this.colorInGreen;\r\n            newLabel = \"Green\";\r\n        } else if (this.state.filterName === \"Green\") {\r\n            newColoringFunction = this.colorInWhite;\r\n            newLabel = \"Gray\";\r\n        }\r\n        else {\r\n            newColoringFunction = this.colorInCells;\r\n            newLabel = \"All\";\r\n        }\r\n\r\n        this.setState({ coloringFunction: newColoringFunction, filterName: newLabel });\r\n    }\r\n\r\n    /* static getDerivedStateFromProps(props, state) {\r\n        return { ce: props.GridValues };\r\n    }\r\n    style={{ display: 'inline-block', float: 'right' }}\r\n    */\r\n    render() {\r\n        const { paused, filterName, dim, steps, p5, next, coloringFunction, cells, gDecay } = this.state\r\n        return (\r\n            <div className=\"Grid\">\r\n                <div className=\"GridBtns\">\r\n                    <button onClick={this.init}>Init</button>\r\n                    <button onClick={this.pause}>{paused ? \"unpause\" : \"pause\"}</button>\r\n                    <button onClick={this.swapFilter}>{filterName}</button>\r\n                    <button onClick={this.toggleCellSize}>cell size: {dim}</button>\r\n                    <button onClick={this.toggleSteps}>steps: {steps}</button>\r\n                    <button onClick={() => this.doDrawing(p5, coloringFunction)}>Increment</button>\r\n                    <button onClick={this.toggleGDecay}>{gDecay ? \"G Decays\" : \"G Doesn't Decay\"}</button>\r\n                </div>\r\n\r\n                <Canvas init={this.init} dim={dim} rows={cells} next={next} draw={this.draw} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid;","import './App.css';\nimport { Grid } from './Controls/Grid.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}